" ================================
"  Language setting
" ================================
if !has("gui_running") && v:progname == "vim"
    if $LANG =~ "UTF-8"
        let lang = "UTF-8"
    elseif $LANG == "C.GBK"
        let lang = "cp936"
    endif

    if exists('lang')
        exec "set encoding=" . lang
        exec "set fileencoding=" . lang
        exec "language messages " . $LANG
        exec "set termencoding=" . lang
        unlet lang
    endif
endif

set fileencodings=utf-8,ucs-bom,cp936

exec 'set runtimepath+=' . expand('<sfile>:p:h')

if has("gui_running")
    let s:guiFontName = ""
    let s:guiFontSize = 16

function! <SID>SetGuiFont()
    if s:guiFontName == ""
        for i in [ "Microsoft Yahei Mono" ]
            let j = $WINDIR . "/Fonts/" . i . ".ttf"
            if filereadable(j)
                let s:guiFontName = i
                break
            endif
        endfor
        if s:guiFontName == ""
            let s:guiFontName = "Consolas"
        endif
    endif
    let ss = substitute(s:guiFontName, " ", "_", "g") . ":h" . s:guiFontSize
    exec 'set guifont=' . ss
    exec 'set guifontwide=' . ss
endfunction

function! <SID>ChangeGuiFont(delta)
    let s:guiFontSize += a:delta
    if s:guiFontSize < 10 | let s:guiFontSize = 10 | endif
    if s:guiFontSize > 40 | let s:guiFontSize = 40 | endif
    call <SID>SetGuiFont()
endfunction

    set guioptions-=m  "remove menu bar
    set guioptions-=T  "remove toolbar

    if has("win32")
        noremap <A-=> :call <SID>ChangeGuiFont(2)<Cr>
        noremap <A--> :call <SID>ChangeGuiFont(-2)<Cr>

        call <SID>SetGuiFont()

        if &readonly
          let s:guiFontSize = 16
        endif
        if fnamemodify(&shell,':t') !=? 'bash'
            exec 'source ' . expand('<sfile>:p:h') . '/bash_config.vim'
        endif
    endif
endif

set autoindent cindent nobackup hlsearch nocompatible noerrorbells

" search options
set noignorecase incsearch

set showmode ruler

syntax on
filetype plugin indent on

"======================================================================"
"  Add a cscope database if exists in current or ancestral directories "
"======================================================================"
if executable("cscope") && has("cscope")
"    set csprg=/usr/bin/cscope
"    set csto=1
"    set cst
"    set csverb
"    set cspc=3
    let cs_file = findfile("cscope.out", ".;")
    "echo cscope_file
    if !empty(cs_file) && filereadable(cs_file)
        let cs_pref=matchstr(cs_file, ".*/")
        silent! exec "cs add " . cs_file . "  " . cs_pref
        "execute "cs add " . cscope_file
    endif
endif

" status-line options
"set statusline=\ %F%m%r%h\ %w\ \ CWD:\ %r%{CurDir()}%h\ \ \ Line:\ %l/%L:%c
if ! &readonly
  set laststatus=2
  set statusline=%F\ %m%r%h\ %w\ \ Page\ %{line(\".\")/&lines+1},\ Line\ %l/%L,\ Col\ %c
endif

if exists("tags")
    set tag=tags
endif

" Go to last file if invoked without arguments.
autocmd VimEnter * nested if
  \ argc() == 0 && bufname("%") == "" |
  \   exec "normal! `0" |
  \ endif
" When editing a file, always jump to the last known cursor position.
" Don't do it when the position is invalid or when inside an event handler
" (happens when dropping a file on gvim).
autocmd BufReadPost *
  \ if line("'\"") > 1 && line("'\"") <= line("$") |
  \   exec "normal! g`\"" |
  \ endif

autocmd BufWritePre *  if &modified && expand("%:e") != "md" | let l = line(".") | let c = col(".") | %s/\s\+$//e | call cursor(l, c) | endif

autocmd FileType xml,htm,html set mps+=<:>

" Maximize the windows if gvim is running
autocmd GUIEnter * simalt ~x

" Show tabs
if v:progname != "vimdiff"
"  autocmd BufEnter *.c,*.h,*.cpp,*.hpp,*.cc,*.cxx,*.S,*.s set list listchars=tab:>-
    set shortmess=a
endif

"==================="
" Keymap setting
"==================="
inoremap <C-S> <Esc>:update<Cr>:startinsert<Cr>
nnoremap <C-S> :update<Cr>

inoremap <C-F4>  <Esc>:xall<Cr>
nnoremap <C-F4>  :xall<Cr>

" Remove spaces of one tabstop
function! <SID>vRemoveSpacesOfTab() range
    exec a:firstline . "," . a:lastline . 's/^\( \{' . &tabstop . '\}\|\t\)//e'
    let @/ = ''
endfunction
function! <SID>vInsertSpacesOfTab() range
    if &g:expandtab
        let spaces = ''
        let i = 0
        while i < &tabstop
            let spaces .= ' '
            let i += 1
        endwhile
    else
        let spaces = '\t'
    endif
    exec a:firstline . "," . a:lastline . 's/^/'  . spaces . '/'
    let @/ = ''
endfunction

" Insert/Remove a `tab' of spaces (in visual mode)
vnoremap <script> <silent> <BS>  :call <SID>vRemoveSpacesOfTab()<Cr><Esc>gv
vnoremap <script> <silent> <Tab> :call <SID>vInsertSpacesOfTab()<Cr><Esc>gv

" Mapped keys for NERDTree plugin
noremap <F3> :NERDTreeToggle<Cr>
"#let NERDTreeIgnore = ['\.o$\|\.ko$']
let NERDTreeIgnore = ['\.o$', '\~$', '\.ko$', '\.mod\.c$', 'modules\.order$', 'modules\.builtin$']
"
let NERDTreeBookmarksFile = "~/.NERDTreeBookmarks"
let NERDTreeShowBookmarks = 1
let NERDTreeStatusline = -1

function! <SID>SwitchTabStop(ts)
    let &tabstop     = a:ts
    let &softtabstop = a:ts
    let &shiftwidth  = a:ts
endfunction

noremap <script> <silent> <Leader>t4  :call <SID>SwitchTabStop(4)<Cr>
noremap <script> <silent> <Leader>t8  :call <SID>SwitchTabStop(8)<Cr>
" Comment the selected line
nnoremap <Leader>tc  :s/^\(\s*\)\([^#]\)/\1#\2/<Cr>:let @/=''<Cr>

let s:whites_visible = 0

function! <SID>nToggleWhites(pattern)
    if @/ != a:pattern
        let s:whites_visible = 1
    else
        let s:whites_visible = ! s:whites_visible
    endif
    if s:whites_visible
        exec 'normal! /' . a:pattern . "/\<Cr>"
        let @/ = a:pattern
    else
        let @/ = ''
    endif
    return @/
endfunction

noremap <script> <silent> <Leader>vt   :let @/=<SID>nToggleWhites('^\t\+')<Cr>:set hls<Cr>
noremap <script> <silent> <Leader>vta  :let @/=<SID>nToggleWhites('\t\+')<Cr>:set hls<Cr>
noremap <script> <silent> <Leader>vs   :let @/=<SID>nToggleWhites('^ \+')<Cr>:set hls<Cr>

" Find next word from the start postition and return the position
" of that word by expanding tabs to spaces.
function! <SID>GetNextWordPosition(line, start)
    let col = 0
    let spaces = 0
    let i = a:start
    while 1
        let c = strpart(a:line, i, 1)
        let i += 1
        if c == "\t"
            let col = (((col + 1) / &tabstop + 1) * &tabstop) - 1 | let spaces = 0
        elseif c == " "
            if spaces == &tabstop | let col += &tabstop | let spaces = 0 | else | let spaces += 1 | endif
        else
            break
        endif
    endwhile
    let col += spaces
    return col + a:start
endfunction

function! <SID>GetColumnPositions(line)
    let x = 0
    let pos = []
    while x < len(a:line)
        let i = <SID>GetNextWordPosition(a:line, x)
        call add(pos, i)

        while x < len(a:line)
            let c = strpart(a:line, x, 1)
            if c == "\t" || c == " " | let x += 1 | else | break | endif
        endwhile
        while x < len(a:line)
            let c = strpart(a:line, x, 1)
            if c != "\t" && c != " " | let x += 1 | else | break | endif
        endwhile
    endwhile
    return pos
endfunction

function! <SID>vAlignColumns() range
    let y = a:firstline
    let positions = <SID>GetColumnPositions(getline(y))
    while y <= a:lastline
        let newline = ""
        let i = 0
        let fields = split(getline(y))
        while i < len(fields)
            let x = strlen(newline) + 1
            let newline .= " "
            while x < positions[i]
                let newline .= " "
                let x += 1
            endwhile
            let newline .= fields[i]
            let i += 1
        endwhile
"        echo newline
        call setline(y, newline)
        let y += 1
    endwhile
endfunction

"""nnoremap <F9> :call <SID>GetNextWordPosition(getline("."),0)<Cr>
"""nnoremap <F9> :echo <SID>GetColumnPositions(getline("."))<Cr>

" Align fields of selected lines based on the first line
vnoremap <Leader>a :call <SID>vAlignColumns()<Cr>

function! <SID>GetLeadingSpaceWidth(line)
	let width = 0
	let i = 0
	let n = 0
	while i < strlen(a:line)
		if a:line[i] == ' '
			let width += 1
			let n = (n + 1) % &tabstop
		elseif a:line[i] == "\t"
			let width = (width + &tabstop) / &tabstop * &tabstop
			let n = 0
		else
			break
		endif
		let i += 1
	endwhile
	return [width, strpart(a:line,i)]
endfunction

function! <SID>vConvertTabsOrSpaces(toSpace) range
    let ln = a:firstline
    while ln <= a:lastline
		let line = getline(ln)
    	let x = <SID>GetLeadingSpaceWidth(line)
    	let newline = ''
    	let width = x[0]
        if ! a:toSpace
        	while width >= &tabstop
        		let newline .= "\t"
        		let width -= &tabstop
        	endwhile
        endif
        while width > 0
    		let newline .= ' '
    		let width -= 1
    	endwhile
    	let newline .= x[1]
        call setline(ln, newline)
        let ln += 1
    endwhile
endfunction

" Convert tabs to spaces within the entire file
nnoremap <script> <silent>  %et :% call <SID>vConvertTabsOrSpaces(0)<Cr>
" Convert spaces to tabs within the entire file
nnoremap <script> <silent>  %es :% call <SID>vConvertTabsOrSpaces(1)<Cr>

" Convert tabs to spaces within selected range
vnoremap <script> <silent> <Leader>et  :call <SID>vConvertTabsOrSpaces(0)<Cr>
nnoremap <script> <silent> <Leader>et  :. call <SID>vConvertTabsOrSpaces(0)<Cr>

" Convert spaces to tabs within selected range
vnoremap <script> <silent> <Leader>es  :call <SID>vConvertTabsOrSpaces(1)<Cr>
nnoremap <script> <silent> <Leader>es  :. call <SID>vConvertTabsOrSpaces(1)<Cr>
"

let s:ZERO_POINT = [0,0,0,0]

function! <SID>SelectTexts(start, end)
    call setpos('.', a:start)
    normal! v
    call setpos('.', a:end)
endfunction

"=================================================================================================================
"  vCopyColumn: Copy the first column of the selected range to register @"
"  makePrintf:  Paste to the cursor a little fragment of C code to print the varibles
"               which are saved in register @"
"=================================================================================================================
function! <SID>vCopyColumn(fid) range
    let y = a:firstline
    let s = ""
    while y <= a:lastline
        let fields = split(getline(y))
        if len(fields) > 0
            let tmp = split(fields[a:fid], '\s*[=;]\s*')
            let s .= " " . tmp[0]
        endif
        let y += 1
    endwhile
    let @" = s
    return s
endfunction

function! <SID>nPastePrintf(vars)
    let sep = ','
    let s1 = "printf(\""
    let s2 = "    "
    let fields = split(a:vars)
    let i = 0
    while i < len(fields)
        let s1 .=  " " . fields[i] . " %u" . sep
        let s2 .=  " " . fields[i] . ','
        let i += 1
    endwhile

    if len(fields) > 0
        let s1 = s1[s1 : len(s1) - 2] . "\\n\",\n"
        let s2 = s2[s2 : len(s2) - 2] . ");\n"
        let @0 = s1 . s2
        exec 'normal "0p'
    endif
endfunction

autocmd FileType c,cpp,h vnoremap <script> <silent> <buffer> <leader>\1 :call <SID>vCopyColumn(0)<Cr> |
\ vnoremap <script> <silent> <buffer> <leader>\2 :call <SID>vCopyColumn(1)<Cr> |
\ nnoremap <script> <silent> <buffer> <leader>\x :call <SID>nPastePrintf(@")<Cr>

function! <SID>SelectMostOutterBlock()
    let savedpos = getpos('.')
    let retval = [ s:ZERO_POINT, s:ZERO_POINT ]

    let lastpos = getpos('.')
    while 1
        "echom printf("Line %d : %s", line('.'),getline('.'))
        if (&filetype == 'cpp'||&filetype=="h") && search('namespace\s\+\h[A-zA-z_:0-9]*\s*{', 'bcn', line(".")-1) > 0
			call setpos('.',lastpos)
			break
		endif
        let lastpos = getpos('.')
        normal [{
        if getpos('.') == lastpos | break | endif
    endwhile

    let lastpos = getpos('.')
    if lastpos != savedpos
        normal %
        let retval = [ lastpos, getpos('.') ]
    endif

    call setpos('.', savedpos)
    return retval
endfunction

"# select the entrie function for c/c++ filetype: {...}
function! <SID>SelectCFunction()
    let savedpos = getpos('.')
    let [ startpos, endpos ] = <SID>SelectMostOutterBlock()

    if startpos == s:ZERO_POINT | call setpos(".", savedpos) | return | endif

    call setpos('.', startpos)
    " move to starting )
    if search(')', 'b') == 0 | call setpos(".", savedpos) | return | endif
    " move to starting (
    normal %

    let pattern = '[A-Za-z_][A-Za-z_0-9]*'
    if search(pattern, 'b') == 0 | call setpos(".", savedpos) | return | endif
    while search(pattern, 'b', line('.')-1) > 0 | endwhile

    call <SID>SelectTexts(getpos('.'), endpos)
endfunction

function! <SID>InBlock(y, x, pos1, pos2)
    if (a:y < a:pos1[1] || (a:y == a:pos1[1] && a:x < a:pos1[2])) ||
\      (a:y > a:pos2[1] || (a:y == a:pos2[1] && a:x > a:pos2[2]))
       return 0
    endif
    return 1
endfunction

"# select the entrie function for c/c++ filetype: {...}
function! <SID>SelectOneBlock(dir)
    let savedpos = getpos('.')
    let [ obs, obe ] = <SID>SelectMostOutterBlock()

    if search('\<\(if\|while\|for\|switch\|else\)\>', a:dir) == 0 | break | endif
    let pos_s = getpos('.')

    call search('(')
    normal %

    call search('{')
    normal %
    let pos_e = getpos('.')

    if !<SID>InBlock(pos_s[1], pos_s[2], obs, obe) || !<SID>InBlock(pos_e[1], pos_e[2], obs, obe)
        call setpos('.', savedpos)
        return
    endif
    call <SID>SelectTexts(pos_s, pos_e)
endfunction

autocmd FileType c,cpp,h
\ noremap <buffer> <leader>\n :call <SID>SelectCFunction()<Cr> |
\ noremap <buffer> <leader>\b :call <SID>SelectOneBlock('b')<Cr> |
\ noremap <buffer> <leader>\f :call <SID>SelectOneBlock('')<Cr>

"=================================================================================================================

" Use <Tab> key to switch between windows in NORMAL MODE
nnoremap <Tab> <C-W>W

"# Quick Replace
nnoremap <Leader>s  :%s/\<<C-r><C-w>\>//g<Left><Left>
vnoremap <Leader>s  y:/\<<C-r>"\>//g<Left><Left>

"# Display registers
nnoremap <silent> <Leader>r  :registers<Cr>

"# Toggle line number
nnoremap <silent> <Leader>]  :let &number=!&number <Bar> let &relativenumber=0 <Cr>
nnoremap <silent> <Leader>[  :let &relativenumber=!&relativenumber <Bar> let &number=0 <Cr>

"# Hide search highlighting
nnoremap <silent> <Leader>0  :let @/ = ''<Cr>

"# Join two lines
nnoremap K   kJ

nnoremap <silent> <Leader>p0 :set nopaste<cr>
nnoremap <silent> <Leader>p9 :set paste<cr>
nnoremap <Leader>u  viwu
nnoremap <Leader>U  viwU

vnoremap y ygv<Esc>

"# select the entrie function for make filetype: $(...) or ${...}
function! <SID>SelectMakeFunction(magic)
    if a:magic == 0 | let c1 = '{' | let c2 = '}' |
\   else | let c1 = '(' | let c2 = ')' | endif
    let savedpos = getpos('.')
    let current_char = getline('.')[col('.')-1]
    if current_char != c1
        let [y, x] = searchpairpos(c1, '', c2, 'b')
        if x == 0 && y == 0 | call setpos(".", savedpos) | return | endif
    endif
    let [y, x] = searchpos('[$]\s*' . c1, 'bn', line('.'))
    if x == 0 && y == 0 | call setpos(".", savedpos) | return | endif
    exec 'normal %v[' . c1 . 'F$'
endfunction

autocmd FileType make
\ noremap <silent> <script> <buffer> <F9> :call <SID>SelectMakeFunction(0)<Cr> |
\ noremap <silent> <script> <buffer> <F10> :call <SID>SelectMakeFunction(1)<Cr>

" Read the project file
"
function! <SID>OpenProject()
	let file = findfile(".project", ".;")
	if filereadable(file)
		let y = readfile(file)
		for x in y
			let fx = split(x)
			if len(fx) == 0 | continue | endif
			if fx[1][0] == '"'
				let file = fx[1]
				let line = fx[3]
			elseif fx[2][0] == '"'
				let file = fx[2]
				let line = fx[4]
			endif
			echo file . "  :  " . line
		endfor
	endif
endfunction
nmap <script> <silent> <C-P> :call <SID>OpenProject()<Cr>

set backspace=indent,eol,start
set autoread

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" High light configurations
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
colorscheme evening2

"# Auto commands
autocmd BufEnter *.c,*.h,*.cpp,*.hpp,*.cc,*.cxx,*.S,*.s set noexpandtab
autocmd BufEnter *.py set noexpandtab tabstop=4
autocmd BufEnter *.md set filetype=markdown

"# Tabstop Setting
set tabstop=4 softtabstop=4 shiftwidth=4

" Apply local configurations for the project
let local_vimrc = findfile("local.vimrc", ".;")
if !empty(local_vimrc) && filereadable(local_vimrc)
    silent! exec "source " . local_vimrc
endif

